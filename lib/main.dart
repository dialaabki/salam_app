import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:provider/provider.dart'; // Import provider

// --- ADDED: Import Firebase Core ---
import 'package:firebase_core/firebase_core.dart';
// --- ADDED: Import Firebase Options (Generated by FlutterFire CLI) ---
// Ensure this file exists in your 'lib' folder after running flutterfire configure
import 'firebase_options.dart';


// --- Import Screens --- (Keep your existing imports)
import 'screens/UserHomeScreen.dart';
import 'screens/progress/UserProgressHistoryScreen.dart';
import 'screens/notifications/UserNotificationsScreen.dart';
import 'screens/settings/UserSettingsScreen.dart';
import 'screens/profile/UserProfileScreen.dart';
import 'screens/Reminders/RemindersListScreen.dart';
import 'screens/MoodTrackingScreen.dart';
import 'screens/SelfAssessment/SelfAssessmentScreen.dart';
import 'screens/activities/ActivitySelectionScreen.dart';
import 'screens/resources/ResourcesListScreen.dart';
import 'screens/DoctorDirectory/DoctorDirectoryScreen.dart';
// --- ADD THIS IMPORT ---
import 'screens/onboarding/LanguageSelectionScreen.dart';

// --- Import ThemeNotifier --- (Keep your existing import)
import 'providers/theme_provider.dart'; // Adjust path if needed
// Global Theme Notifier (as used in SettingsScreen)
final ValueNotifier<ThemeMode> themeNotifier = ValueNotifier(ThemeMode.light);

// --- Define Colors used in Themes --- (Keep as is)
const Color mainAppColor = Color(0xFF5588A4);
const Color darkTextColor = Color(0xFF30394F);
const Color lightTextColor = Color(0xFF6A7185);
const Color lightBgColor = Colors.white;
const Color secondaryAppColor = Color(0xFF5E94FF);


// --- Define Light and Dark Themes --- (Keep these as they are)
final ThemeData lightTheme = ThemeData(
  brightness: Brightness.light,
  primaryColor: mainAppColor,
  scaffoldBackgroundColor: lightBgColor,
  visualDensity: VisualDensity.adaptivePlatformDensity,
  appBarTheme: const AppBarTheme(
    backgroundColor: mainAppColor,
    foregroundColor: Colors.white,
    elevation: 0,
    iconTheme: IconThemeData(color: Colors.white),
  ),
  colorScheme: ColorScheme.light(
    primary: mainAppColor,
    secondary: secondaryAppColor,
    surface: lightBgColor,
    onSurface: darkTextColor,
    background: lightBgColor,
    onBackground: darkTextColor,
  ),
  textTheme: const TextTheme(
    bodyLarge: TextStyle(color: darkTextColor),
    bodyMedium: TextStyle(color: lightTextColor),
    titleLarge: TextStyle(color: darkTextColor, fontWeight: FontWeight.bold),
    titleMedium: TextStyle(color: darkTextColor, fontWeight: FontWeight.w600),
  ),
  switchTheme: SwitchThemeData(
    thumbColor: MaterialStateProperty.resolveWith<Color?>((Set<MaterialState> states) {
      if (states.contains(MaterialState.selected)) return mainAppColor;
      return Colors.grey[300];
    }),
    trackColor: MaterialStateProperty.resolveWith<Color?>((Set<MaterialState> states) {
      if (states.contains(MaterialState.selected)) return mainAppColor.withOpacity(0.5);
      return Colors.grey[400];
    }),
  ),
);

final ThemeData darkTheme = ThemeData(
  brightness: Brightness.dark,
  primaryColor: mainAppColor,
  scaffoldBackgroundColor: const Color.fromARGB(255, 47, 46, 46),
  visualDensity: VisualDensity.adaptivePlatformDensity,
  appBarTheme: AppBarTheme(
    backgroundColor: const Color.fromARGB(255, 49, 49, 49),
    foregroundColor: Colors.white,
    elevation: 0,
    iconTheme: const IconThemeData(color: Colors.white),
  ),
  colorScheme: ColorScheme.dark(
    primary: mainAppColor,
    secondary: secondaryAppColor.withOpacity(0.8),
    surface: Colors.grey[850]!,
    onSurface: Colors.white.withOpacity(0.87),
    background: const Color.fromARGB(255, 46, 45, 45),
    onBackground: Colors.white.withOpacity(0.87),
  ),
  textTheme: TextTheme(
    bodyLarge: TextStyle(color: Colors.white.withOpacity(0.87)),
    bodyMedium: TextStyle(color: Colors.white.withOpacity(0.60)),
    titleLarge: TextStyle(color: Colors.white.withOpacity(0.87), fontWeight: FontWeight.bold),
    titleMedium: TextStyle(color: Colors.white.withOpacity(0.87), fontWeight: FontWeight.w600),
  ),
  switchTheme: SwitchThemeData(
    thumbColor: MaterialStateProperty.resolveWith<Color?>((Set<MaterialState> states) {
      if (states.contains(MaterialState.selected)) return mainAppColor;
      return Colors.grey[600];
    }),
    trackColor: MaterialStateProperty.resolveWith<Color?>((Set<MaterialState> states) {
      if (states.contains(MaterialState.selected)) return mainAppColor.withOpacity(0.5);
      return Colors.grey[800];
    }),
  ),
);


// --- MODIFIED main() for Firebase Initialization ---
Future<void> main() async { // <-- Made main async
  // Kept original Flutter binding initialization
  WidgetsFlutterBinding.ensureInitialized();

  // --- ADDED: Initialize Firebase ---
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  // --- End Firebase Initialization ---


  // --- Kept original Provider setup ---
  runApp(
    ChangeNotifierProvider(
      create: (_) => ThemeNotifier(),
      child: const MyApp(), // Keep MyApp as the direct child
    ),
  );
}
// --- End of main() Modifications ---


// --- MyApp Widget (Keep as is) ---
class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  // --- Define Route Name Constants --- (Keep as is)
  static const String userHomeRoute = '/';
  static const String userProgressRoute = '/user/progress';
  static const String userNotificationsRoute = '/user/notifications';
  static const String userSettingsRoute = '/user/settings';
  static const String userProfileRoute = '/user/profile';
  static const String remindersRoute = '/reminders';
  static const String moodTrackingRoute = '/moodTracking';
  static const String selfAssessmentRoute = '/selfAssessment';
  static const String activitySelectionRoute = '/activitySelection';
  static const String resourcesRoute = '/resources';
  static const String doctorsRoute = '/doctors';
  static const String languageSelectionRoute = '/language-selection';


  @override
  Widget build(BuildContext context) {
    // Keep existing Consumer logic for theme
    return Consumer<ThemeNotifier>(
      builder: (context, themeNotifier, child) {
        return MaterialApp(
          title: 'Mind Care App',
          theme: lightTheme,
          darkTheme: darkTheme,
          themeMode: themeNotifier.themeMode,
          localizationsDelegates: const [
             GlobalMaterialLocalizations.delegate,
             GlobalWidgetsLocalizations.delegate,
             GlobalCupertinoLocalizations.delegate,
           ],
           supportedLocales: const [
             Locale('en', ''),
             // Locale('ar', ''),
           ],
          initialRoute: languageSelectionRoute,
          // Keep existing routes
          routes: {
            languageSelectionRoute: (context) => const LanguageSelectionScreen(),
            userHomeRoute: (context) => const UserHomeScreen(),
            userProgressRoute: (context) => const UserProgressHistoryScreen(),
            userNotificationsRoute: (context) => const UserNotificationsScreen(),
            userSettingsRoute: (context) => const UserSettingsScreen(),
            userProfileRoute: (context) => const UserProfileScreen(),
            remindersRoute: (context) => const RemindersListScreen(),
            selfAssessmentRoute: (context) => const SelfAssessmentScreen(),
            activitySelectionRoute: (context) => ActivitySelectionScreen(),
            resourcesRoute: (context) => const ResourcesListScreen(),
            doctorsRoute: (context) => const DoctorDirectoryScreen(),
            // Uncomment if MoodTrackingScreen needs a direct route
            // moodTrackingRoute: (context) => const MoodTrackingScreen(),
          },
          debugShowCheckedModeBanner: false,
        );
      },
    );
  }
}


// --- Keep your ThemeNotifier definition (commented out here as it's likely in providers/theme_provider.dart) ---
/*
import 'package:flutter/material.dart';

class ThemeNotifier with ChangeNotifier {
  ThemeMode _themeMode = ThemeMode.light; // Default theme

  ThemeMode get themeMode => _themeMode;

  bool get isDarkMode => _themeMode == ThemeMode.dark;

  void setThemeMode(ThemeMode mode) {
    if (_themeMode != mode) {
      _themeMode = mode;
      notifyListeners(); // Notify listeners about the change
    }
  }

  void toggleTheme() {
    setThemeMode(_themeMode == ThemeMode.light ? ThemeMode.dark : ThemeMode.light);
  }
}
*/